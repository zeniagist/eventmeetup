{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showHideDetails","handleShowButton","setState","this","props","event","className","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","location","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","eventCount","handleEventInputChanged","updateEvents","name","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mPAsCeA,E,4MAnCbC,MAAQ,CACNC,iBAAiB,G,EAInBC,iBAAmB,YACkB,IAA/B,EAAKF,MAAMC,gBACb,EAAKE,SAAS,CAAEF,iBAAiB,IAEjC,EAAKE,SAAS,CAAEF,iBAAiB,K,4CAIrC,WAAU,IAAD,OACWG,KAAKC,MAAfC,MACR,OACE,sBAAKC,UAAU,QAAf,UAEGH,KAAKJ,MAAMC,iBACV,qBAAKM,UAAU,eAAf,SACE,gDAIJ,wBACEA,UAAU,oBACVC,QAAS,kBAAM,EAAKN,oBAFtB,SAIIE,KAAKJ,MAAMC,gBAAmC,eAAjB,wB,GA7BrBQ,aCgBLC,E,4JAdb,WAAU,IACAC,EAAWP,KAAKC,MAAhBM,OACR,OACE,oBAAIJ,UAAU,YAAd,SACGI,EAAOC,KAAI,SAACN,GAAD,OACV,6BACE,cAAC,EAAD,CAAOA,MAAOA,KADPA,EAAMO,a,GANDJ,aCmDTK,E,4MAnDbd,MAAQ,CACNe,MAAO,GACPC,YAAa,I,EAIfC,mBAAqB,SAACX,GACpB,IAAMY,EAAQZ,EAAMa,OAAOD,MACrBF,EAAc,EAAKX,MAAMe,UAAUC,QAAO,SAACC,GAC/C,OAAOA,EAASC,cAAcC,QAAQN,EAAMK,gBAAkB,KAEhE,EAAKpB,SAAS,CACZY,MAAOG,EACPF,iB,EAKJS,kBAAoB,SAACC,GACnB,EAAKvB,SAAS,CACZY,MAAOW,K,4CAIX,WAAU,IAAD,OACP,OACE,sBAAKnB,UAAU,aAAf,UAEE,uBACEoB,KAAK,OACLpB,UAAU,OACVW,MAAOd,KAAKJ,MAAMe,MAClBa,SAAUxB,KAAKa,qBAGjB,qBAAIV,UAAU,cAAd,UACGH,KAAKJ,MAAMgB,YAAYJ,KAAI,SAACc,GAAD,OAC1B,oBAEElB,QAAS,kBAAM,EAAKiB,kBAAkBC,IAFxC,SAGEA,GAFKA,MAIT,6BACE,gDADM,iB,GA3COjB,aCoCVoB,E,4MAnCb7B,MAAQ,CACN8B,WAAY,I,EAIdC,wBAA0B,SAACzB,GACzB,IAAMwB,EAAaxB,EAAMa,OAAOD,MAChC,GAAIY,EAAa,EACf,OAAO,EAAK3B,SAAS,CACnB2B,WAAY,KAGd,EAAK3B,SAAS,CACZ2B,eAEF,EAAKzB,MAAM2B,aAAa,GAAIF,I,4CAIhC,WACE,OACE,sBAAKvB,UAAU,iBAAf,UACE,qDACA,uBACEoB,KAAK,SACLM,KAAK,iBACL1B,UAAU,sBACVW,MAAOd,KAAKJ,MAAM8B,WAClBF,SAAUxB,KAAK2B,iC,GA7BItB,aCkBdyB,E,4JAZb,WACE,OACE,sBAAK3B,UAAU,MAAf,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAPUE,aCKE0B,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.37558b94.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    showHideDetails: false,\r\n  };\r\n\r\n  // show details button\r\n  handleShowButton = () => {\r\n    if (this.state.showHideDetails === true) {\r\n      this.setState({ showHideDetails: false });\r\n    } else {\r\n      this.setState({ showHideDetails: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { event } = this.props;\r\n    return (\r\n      <div className='event'>\r\n\r\n        {this.state.showHideDetails && (\r\n          <div className='eventDetails'>\r\n            <h2>About event:</h2>\r\n          </div>\r\n        )}\r\n\r\n        <button\r\n          className='showDetailsButton'\r\n          onClick={() => this.handleShowButton()}\r\n        >\r\n          {!this.state.showHideDetails ? 'Show Details' : 'Hide Details'}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event'\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className='EventList'>\r\n        {events.map((event) => (\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: []\r\n  }\r\n\r\n  // update state of city in text input\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  }\r\n\r\n  // update query state when clicking suggested\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='CitySearch'>\r\n        {/* text input */}\r\n        <input\r\n          type='text'\r\n          className='city'\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        {/* list of suggested cities */}\r\n        <ul className='suggestions'>\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}\r\n            >{suggestion}</li>\r\n          ))}\r\n          <li key='all'>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    eventCount: 32,\r\n  };\r\n\r\n  // change number of events list\r\n  handleEventInputChanged = (event) => {\r\n    const eventCount = event.target.value;\r\n    if (eventCount < 1) {\r\n      return this.setState({\r\n        eventCount: 32\r\n      });\r\n    } else {\r\n      this.setState({\r\n        eventCount\r\n      });\r\n      this.props.updateEvents('', eventCount);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='numberOfEvents'>\r\n        <label>Number of Events</label>\r\n        <input\r\n          type='number'\r\n          name='numberOfEvents'\r\n          className='numberOfEventsInput'\r\n          value={this.state.eventCount}\r\n          onChange={this.handleEventInputChanged}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\nimport Event from './Event'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <EventList />\r\n        {/* <Event /> */}\r\n        <CitySearch />\r\n        <NumberOfEvents />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}